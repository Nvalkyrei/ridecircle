version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ridecircle:password@postgres:5432/ridecircle_prod
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-here
      - JWT_REFRESH_SECRET=your-refresh-secret-here
      - ENCRYPTION_KEY=your-encryption-key-here
    depends_on:
      - postgres
      - redis
    networks:
      - ridecircle-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ridecircle_prod
      - POSTGRES_USER=ridecircle
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ridecircle-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ridecircle-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - ridecircle-network

volumes:
  postgres_data:
  redis_data:

networks:
  ridecircle-network:
    driver: bridge
